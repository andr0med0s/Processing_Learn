//-------------8.6: Pass by Value vs. Pass by Reference - Processing Tutorial-----
Particle p1;
Particle p2;
Particle p3;

void setup(){
  size(640, 400);
  p1 = new Particle (100, 100, 50);
  p2 = new Particle (500, 200, 100); 
  //p2 = new Particle (); 
  //p3 = new Particle();
  //p3 = new Particle (500, 200, 100);
}

void draw(){
  background(0);
  
  //float d = dist(p1.x, p1.y, p2.x, p2.y);
  //if (d < p1.r + p2.r) {
  //  background(0, 255, 0);
  //}
  
  //p1.overlaps(p2);
//------------java передача по ссылке или по значению
/* --------Хабр------------
Есть два способа передачи параметров:
Передача по значению (by value). Значения фактических параметров копируются. 
Вызываемый метод создает свою копию значений аргументов и затем ее использует. 
Поскольку работа ведется с копией, на исходный параметр это никак не влияет.

Передача по ссылке (by reference). Параметры передаются как ссылка (адрес)
на исходную переменную.
Вызываемый метод не создает свою копию, а ссылается на исходное значение. 
Следовательно, изменения, сделанные в вызываемом методе, также будут отражены 
в исходном значении.

В Java переменные хранятся следующим образом:

Локальные переменные, такие как примитивы и ссылки на объекты, создаются в стеке.

Объекты — в куче (heap).

Теперь вернемся к основному вопросу: переменные передаются по значению или по ссылке?

Java всегда передает параметры по значению
*/
/*--- --------Stackoverflo0w---------
Термины "передача по значению" и "передача по ссылке" говорят о переменных.
Передача по значению означает, что значение переменной передается функции / методу. 
Передача по ссылке означает, что ссылка на эту переменную передается функции. 
Последнее дает функции возможность изменять содержимое переменной.
Согласно этим определениям, Java всегда передается по значению. 
К сожалению, когда мы имеем дело с переменными, содержащими объекты,
мы на самом деле имеем дело с дескрипторами объектов, называемыми ссылками, 
которые также передаются по значению.
Эта терминология и семантика легко сбивают с толку многих новичкоd

*/
  p2.overlaps(p1);
  
  //  if(p2.overlaps(p3)){
  //   background(255, 0, 0);
  //}

  p2.x = mouseX;
  p2.y = mouseY;
  
  p1.display();
  p2.display();
  //p3.display();
}
